1.PC寄存器：
    _存放下一条指令在方法中的偏移量。_
    也可以看做是线程所执行的字节码的行号指示器，
    字节码解释器的工作就是通过改变这个计数器的值来选取下一条需要执行的指令。
2.JVM虚拟机栈:
    PC寄存器，JVM的虚拟机栈，和本地方法栈都是线程私有。
    JVM虚拟机栈主要由栈帧来组成，每一个方法的调用就相当于一个栈帧，
    所以说，当出现无限递归这种情况的时候，栈帧就可能会过多的创建，从而导致栈内存溢出。
    栈帧中又包含了局部变量区，操作数区等，用于具体对数据进行操作。
3.本地方法栈：
    主要用来支持native方法，记录native方法调用的状态。
    可以把native 方法看成是 java 调用 非 java 代码的一个接口。
    _主要用于允许Java 和其他语言，比如 C 语言进行交互。_
4.JVM方法区:
    _主要存储已经加载的类的信息_
    比如构造函数的信息，方法的信息，常量的信息。
    Class对象提供的getXXX()方法取得的类的信息就是从JVM方法区中得到。
    Ps：JVM方法区是永久代的一个子集，常量池也是放在JVM方法区中。
5.JVM堆：
    _主要目的是用来存放数组和对象。_
    同时，JVM 堆也是 内存溢出和垃圾回收的主要区域。

_在JVM堆中，又分为新生代，老生代。_
_新生代中，又分为eden区域和两个Survivor区域。默认比例为8:1:1，也就是说，可以用的内存为90%。
当然，可以用-XX:SurvivorRatio设置eden和Survivor的比值，默认为8:1。_

JDK8 内存结构变动
在JDK8中，最主要的就是元空间代替了永久代（PermGen Space），
由于 上面结构图中的 JVM方法区是永久代的子集，那么就是说这部分会没有了，
取而代之的是元空间（Metaspace）。



Java 堆内存和非堆内存参数
_-XX:Persize：_ 设置非堆内存初始值，默认为1/64。
_-XX:MaxPersize：_ 设置非堆内存最大值，默认为1/4.
_-Xss_ 设置每个线程占用堆内存大小，现在默认为1M，以前为256K。
设置线程越小，堆内存大小不变，可以创造的线程数越多（当然有一个限度）。但是这个值也需要经过严格的测试再设置。
_-Xms_ JVM堆初始分配内存。默认为物理内存的1/64，当默认堆内存的空余空间小于40%的时候，
这个堆内存就会自动增长到-Xmx指定的最大堆分配内存。
_-Xmx_ JVM的最大堆分配内存。默认为物理内存的1/4，当空余内存大于70%的时候，
该堆内存又会自动减少到-Xms指定的内存。
_-Xmn_ 指定新生代的内存大小。当堆大小不变的情况下，新生代越大，老生代越小，默认新生代和老年代的比例为1：2
而且这个比例会严重影响系统性能，sun推荐为新生代占整个堆内存3/8。
_-XX:SurvivorRatio_ 新生代中，又分为eden区域和两个Survivor区域。默认比例为8:1:1，也就是说，
可以用的内存为90%。该参数用来设置eden和Survivor的比值，默认为8:1
_-XX:NewRatio_ 年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)


_-XX:+UseConcMarkSweepGC_ CMS 垃圾收集器
_-XX:+UseParNewGC_ ：ParNew 垃圾收集器
_-XX:-UseSerialGC_ ：串行垃圾回收器（新生代）
_-XX:+PrintGCDetails_ ：打印详细日志
_-XX:+PrintGCDetails_ -XX:+PrintGCDateStamps -Xloggc:gc.log ：打印详细日志到一个文件中







